#ifndef LLVM_LIB_TARGET_V810_MCTARGETDESC_V810INSTPRINTER_H
#define LLVM_LIB_TARGET_V810_MCTARGETDESC_V810INSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
class V810InstPrinter : public MCInstPrinter {
public:
  V810InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  void printRegName(raw_ostream &OS, MCRegister Reg) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &O);
  void printBcondInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  void printJmpInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                               unsigned OpIdx, unsigned PrintMethodIdx,
                               raw_ostream &O);
  static const char *getRegisterName(MCRegister Reg);
  
  void printOperand(const MCInst *MI, int opNum, raw_ostream &OS);
  void printBranchOperand(const MCInst *MI, uint64_t Address, unsigned opNum, raw_ostream &OS);
  void printMemOperand(const MCInst *MI, int opNum, raw_ostream &OS);
  void printCondOperand(const MCInst *MI, int opNum, raw_ostream &OS);
};

}

#endif