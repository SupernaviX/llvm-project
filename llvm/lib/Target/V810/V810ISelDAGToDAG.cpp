#include "V810TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
using namespace llvm;

#define DEBUG_TYPE "v810-isel"
#define PASS_NAME "V810 DAG-> DAG Pattern Instruction Selection"

namespace {
class V810DAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  V810DAGToDAGISel() = delete;

  explicit V810DAGToDAGISel(V810TargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  StringRef getPassName() const override { return PASS_NAME; }


  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset);

  // Include the pieces autogenerated from the target description.
#include "V810GenDAGISel.inc"
};
} // end anonymous namespace

char V810DAGToDAGISel::ID = 0;

INITIALIZE_PASS(V810DAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

bool V810DAGToDAGISel::SelectADDRri(SDValue Addr,
                                    SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(
      FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
    Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
    return true;
  }
  // TODO: this is ignoring the offset, and should probably not be
  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, SDLoc(Addr), MVT::i32);
  return true;
}

void V810DAGToDAGISel::Select(SDNode *N) {
  if (N->isMachineOpcode()) {
    N->setNodeId(-1);
    return; // Already selected.
  }

  // This is where target-specific opcodes would get handled

  SelectCode(N);
}

FunctionPass *llvm::createV810IselDag(V810TargetMachine &TM) {
  return new V810DAGToDAGISel(TM);
}