; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -march=v810 -global-isel | FileCheck %s

define void @voidTest(i1 %a, i8 %b, i16 %c, i32 %d) {
; CHECK-LABEL: voidTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    jmp [r31]
    ret void
}

define i1 @boolTest(i1 %a, i8 %b, i16 %c, i32 %d) {
; CHECK-LABEL: boolTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov r6, r10
; CHECK-NEXT:    jmp [r31]
    ret i1 %a
}

define i8 @charTest(i1 %a, i8 %b, i16 %c, i32 %d) {
; CHECK-LABEL: charTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov r7, r10
; CHECK-NEXT:    jmp [r31]
    ret i8 %b
}

define i16 @shortTest(i1 %a, i8 %b, i16 %c, i32 %d) {
; CHECK-LABEL: shortTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov r8, r10
; CHECK-NEXT:    jmp [r31]
    ret i16 %c
}

define i32 @intTest(i1 %a, i8 %b, i16 %c, i32 %d) {
; CHECK-LABEL: intTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov r9, r10
; CHECK-NEXT:    jmp [r31]
    ret i32 %d
}

define i32 @manyParamsTest(i1 %a, i8 %b, i16 %c, i32 %d, i32 %e) {
; CHECK-LABEL: manyParamsTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w 0[r3], r10
; CHECK-NEXT:    jmp [r31]
    ret i32 %e
}

define {i32, i32} @multiRegReturnTest(i32 %p1, i32 %p2) {
; CHECK-LABEL: multiRegReturnTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov r6, r10
; CHECK-NEXT:    mov r7, r11
; CHECK-NEXT:    jmp [r31]
    %a1 = insertvalue {i32, i32} undef, i32 %p1, 0
    %a2 = insertvalue {i32, i32} %a1, i32 %p2, 1
    ret {i32, i32} %a2
}

define {i32, i32, i32} @sretTest(i32 %p1, i32 %p2, i32 %p3) {
; CHECK-LABEL: sretTest:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.w r7, 0[r6]
; CHECK-NEXT:    st.w r8, 4[r6]
; CHECK-NEXT:    st.w r9, 8[r6]
; CHECK-NEXT:    jmp [r31]
    %a1 = insertvalue {i32, i32, i32} undef, i32 %p1, 0
    %a2 = insertvalue {i32, i32, i32} %a1, i32 %p2, 1
    %a3 = insertvalue {i32, i32, i32} %a2, i32 %p3, 2
    ret {i32, i32, i32} %a3
}

define i64 @i64Test(i64 %p1, i64 %p2) {
; CHECK-LABEL: i64Test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    cmp r8, r6
; CHECK-NEXT:    mov r6, r10
; CHECK-NEXT:    setf c, r8
; CHECK-NEXT:    add r9, r7
; CHECK-NEXT:    add r8, r7
; CHECK-NEXT:    mov r7, r11
; CHECK-NEXT:    jmp [r31]
    %res = add i64 %p1, %p2
    ret i64 %res
}
