; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=v810 -mattr=+gprel | FileCheck %s -check-prefix=GPREL
; RUN: llc < %s -mtriple=v810 -mattr=-gprel | FileCheck %s -check-prefix=NO-GPREL

%SomeStruct = type { i32, i16, i16 }

@mutable_global = external dso_local global [4 x i32], align 4
@mutable_global_struct = external dso_local global %SomeStruct, align 4
@immutable_global = external dso_local constant i32, align 4

define i32 @test_gprel_read() {
; GPREL-LABEL: test_gprel_read:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    ld.w sdaoff(mutable_global)[r4], r10
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_read:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global), r0, r6
; NO-GPREL-NEXT:    movea lo(mutable_global), r6, r6
; NO-GPREL-NEXT:    ld.w 0[r6], r10
; NO-GPREL-NEXT:    jmp [r31]
entry:
  %0 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @mutable_global, i32 0, i32 0), align 4
  ret i32 %0
}

define i32 @test_gprel_read_offset() {
; GPREL-LABEL: test_gprel_read_offset:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    ld.w sdaoff(mutable_global+8)[r4], r10
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_read_offset:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global), r0, r6
; NO-GPREL-NEXT:    movea lo(mutable_global), r6, r6
; NO-GPREL-NEXT:    ld.w 8[r6], r10
; NO-GPREL-NEXT:    jmp [r31]
entry:
  %0 = load i32, ptr getelementptr inbounds ([4 x i32], ptr @mutable_global, i32 0, i32 2), align 4
  ret i32 %0
}

define i32 @test_gprel_read_offset_nonword() {
; GPREL-LABEL: test_gprel_read_offset_nonword:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    ld.h sdaoff(mutable_global_struct+4)[r4], r10
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_read_offset_nonword:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global_struct), r0, r6
; NO-GPREL-NEXT:    movea lo(mutable_global_struct), r6, r6
; NO-GPREL-NEXT:    ld.h 4[r6], r10
; NO-GPREL-NEXT:    jmp [r31]
entry:
  %0 = load i16, ptr getelementptr inbounds (%SomeStruct, ptr @mutable_global_struct, i32 0, i32 1), align 4
  %conv = sext i16 %0 to i32
  ret i32 %conv
}

define void @test_gprel_write(i32 %value) {
; GPREL-LABEL: test_gprel_write:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    st.w r6, sdaoff(mutable_global)[r4]
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_write:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global), r0, r7
; NO-GPREL-NEXT:    movea lo(mutable_global), r7, r7
; NO-GPREL-NEXT:    st.w r6, 0[r7]
; NO-GPREL-NEXT:    jmp [r31]
entry:
  store i32 %value, ptr getelementptr inbounds ([4 x i32], ptr @mutable_global, i32 0, i32 0), align 4
  ret void
}

define void @test_gprel_write_offset(i32 %value) {
; GPREL-LABEL: test_gprel_write_offset:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    st.w r6, sdaoff(mutable_global+8)[r4]
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_write_offset:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global), r0, r7
; NO-GPREL-NEXT:    movea lo(mutable_global), r7, r7
; NO-GPREL-NEXT:    st.w r6, 8[r7]
; NO-GPREL-NEXT:    jmp [r31]
entry:
  store i32 %value, ptr getelementptr inbounds ([4 x i32], ptr @mutable_global, i32 0, i32 2), align 4
  ret void
}

define void @test_gprel_write_offset_nonword(i32 %value) {
; GPREL-LABEL: test_gprel_write_offset_nonword:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    st.h r6, sdaoff(mutable_global_struct+4)[r4]
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_gprel_write_offset_nonword:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(mutable_global_struct), r0, r7
; NO-GPREL-NEXT:    movea lo(mutable_global_struct), r7, r7
; NO-GPREL-NEXT:    st.h r6, 4[r7]
; NO-GPREL-NEXT:    jmp [r31]
entry:
  %0 = trunc i32 %value to i16
  store i16 %0, ptr getelementptr inbounds (i8, ptr @mutable_global_struct, i32 4), align 4
  ret void
}

define i32 @test_const_read() {
; GPREL-LABEL: test_const_read:
; GPREL:       # %bb.0: # %entry
; GPREL-NEXT:    movhi hi(immutable_global), r0, r6
; GPREL-NEXT:    movea lo(immutable_global), r6, r6
; GPREL-NEXT:    ld.w 0[r6], r10
; GPREL-NEXT:    jmp [r31]
;
; NO-GPREL-LABEL: test_const_read:
; NO-GPREL:       # %bb.0: # %entry
; NO-GPREL-NEXT:    movhi hi(immutable_global), r0, r6
; NO-GPREL-NEXT:    movea lo(immutable_global), r6, r6
; NO-GPREL-NEXT:    ld.w 0[r6], r10
; NO-GPREL-NEXT:    jmp [r31]
entry:
  %0 = load i32, ptr @immutable_global, align 4
  ret i32 %0
}
