# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -march=v810 -global-isel -run-pass=legalizer %s -o - | FileCheck %s
--- |
  declare i32 @func1()
  declare i32 @func2()

  define i32 @conditionCheck(i32 %input) #0 {
  entry:
    %cond = icmp slt i32 %input, 3
    br i1 %cond, label %then, label %else
  then:
    %res1 = call i32 @func1()
    ret i32 %res1
  else:
    %res2 = call i32 @func2()
    ret i32 %res2
  }

  define i32 @boolCheck(i1 %cond) #1 {
  entry:
    br i1 %cond, label %then, label %else
  then:
    %res1 = call i32 @func1()
    ret i32 %res1
  else:
    %res2 = call i32 @func2()
    ret i32 %res2
  }
...
---
name:              conditionCheck
tracksRegLiveness: true
body:              |
  ; CHECK-LABEL: name: conditionCheck
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(slt), [[COPY]](s32), [[C]]
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[ICMP]](s1)
  ; CHECK-NEXT:   G_BRCOND [[ZEXT]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.then:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func1, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.else:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func2, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY2]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  bb.1.entry:
    liveins: $r6
    %0:_(s32) = COPY $r6
    %1:_(s32) = G_CONSTANT i32 3
    %2:_(s1) = G_ICMP intpred(slt), %0(s32), %1
    G_BRCOND %2(s1), %bb.2
    G_BR %bb.3
  bb.2.then:
    ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
    CALL @func1, csr, implicit-def $r31, implicit-def $r10
    %3:_(s32) = COPY $r10
    ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
    $r10 = COPY %3(s32)
    RET implicit $r10
  bb.3.else:
    ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
    CALL @func2, csr, implicit-def $r31, implicit-def $r10
    %4:_(s32) = COPY $r10
    ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
    $r10 = COPY %4(s32)
    RET implicit $r10
...
---
name:              boolCheck
tracksRegLiveness: true
body:              |
  ; CHECK-LABEL: name: boolCheck
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.1
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.then:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func1, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.else:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func2, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY2]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  bb.1.entry:
    liveins: $r6
    %0:_(s32) = COPY $r6
    %1:_(s1) = G_TRUNC %0(s32)
    G_BRCOND %1(s1), %bb.2
    G_BR %bb.3
  bb.2.then:
    ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
    CALL @func1, csr, implicit-def $r31, implicit-def $r10
    %2:_(s32) = COPY $r10
    ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
    $r10 = COPY %2(s32)
    RET implicit $r10
  bb.3.else:
    ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
    CALL @func2, csr, implicit-def $r31, implicit-def $r10
    %3:_(s32) = COPY $r10
    ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
    $r10 = COPY %3(s32)
    RET implicit $r10
