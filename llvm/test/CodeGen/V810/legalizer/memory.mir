# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -march=v810 -global-isel -run-pass=legalizer %s -o - | FileCheck %s
--- |
  @global_s8 = common global i8 0, align 1
  @global_s16 = common global i16 0, align 2
  @global_s32 = common global i32 0, align 4
  @global_s64 = common global i64 0, align 8

  define i8 @load_global_s8() {
  entry:
    %0 = load i8, ptr @global_s8, align 1
    ret i8 %0
  }

  define void @store_global_s8(i8 %a) {
  entry:
    store i8 %a, ptr @global_s8, align 1
    ret void
  }

  define i16 @load_global_s16() {
  entry:
    %0 = load i16, ptr @global_s16, align 2
    ret i16 %0
  }

  define void @store_global_s16(i16 %a) {
  entry:
    store i16 %a, ptr @global_s16, align 2
    ret void
  }

  define i32 @load_global_s32() {
  entry:
    %0 = load i32, ptr @global_s32, align 4
    ret i32 %0
  }

  define void @store_global_s32(i32 %a) {
  entry:
    store i32 %a, ptr @global_s32, align 4
    ret void
  }

  define i64 @load_global_s64() {
  entry:
    %0 = load i64, ptr @global_s64, align 4
    ret i64 %0
  }

  define void @store_global_s64(i64 %a) {
  entry:
    store i64 %a, ptr @global_s64, align 4
    ret void
  }
...
---
name:              load_global_s8
tracksRegLiveness: true
body:              |
  bb.0:
    ; CHECK-LABEL: name: load_global_s8
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s8
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[GV]](p0) :: (dereferenceable load (s8) from @global_s8)
    ; CHECK-NEXT: $r10 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RET implicit $r10
    %0:_(p0) = G_GLOBAL_VALUE @global_s8
    %1:_(s8) = G_LOAD %0(p0) :: (dereferenceable load (s8) from @global_s8, align 1)
    %2:_(s32) = G_ANYEXT %1
    $r10 = COPY %2:_(s32)
    RET implicit $r10
...
---
name:              store_global_s8
tracksRegLiveness: true
body:              |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: store_global_s8
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s8
    ; CHECK-NEXT: G_STORE [[COPY]](s32), [[GV]](p0) :: (store (s8) into @global_s8)
    ; CHECK-NEXT: RET
    %0:_(s32) = COPY $r6
    %1:_(s8) = G_TRUNC %0
    %2:_(p0) = G_GLOBAL_VALUE @global_s8
    G_STORE %1(s8), %2(p0) :: (store (s8) into @global_s8, align 1)
    RET
...
---
name:              load_global_s16
tracksRegLiveness: true
body:              |
  bb.0:
    ; CHECK-LABEL: name: load_global_s16
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s16
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[GV]](p0) :: (dereferenceable load (s16) from @global_s16)
    ; CHECK-NEXT: $r10 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RET implicit $r10
    %0:_(p0) = G_GLOBAL_VALUE @global_s16
    %1:_(s16) = G_LOAD %0(p0) :: (dereferenceable load (s16) from @global_s16, align 2)
    %2:_(s32) = G_ANYEXT %1
    $r10 = COPY %2:_(s32)
    RET implicit $r10
...
---
name:              store_global_s16
tracksRegLiveness: true
body:              |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: store_global_s16
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s16
    ; CHECK-NEXT: G_STORE [[COPY]](s32), [[GV]](p0) :: (store (s16) into @global_s16)
    ; CHECK-NEXT: RET
    %0:_(s32) = COPY $r6
    %1:_(s16) = G_TRUNC %0
    %2:_(p0) = G_GLOBAL_VALUE @global_s16
    G_STORE %1(s16), %2(p0) :: (store (s16) into @global_s16, align 2)
    RET
...
---
name:              load_global_s32
tracksRegLiveness: true
body:              |
  bb.0:
    ; CHECK-LABEL: name: load_global_s32
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s32
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[GV]](p0) :: (dereferenceable load (s32) from @global_s32)
    ; CHECK-NEXT: $r10 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RET implicit $r10
    %0:_(p0) = G_GLOBAL_VALUE @global_s32
    %1:_(s32) = G_LOAD %0(p0) :: (dereferenceable load (s32) from @global_s32, align 4)
    $r10 = COPY %1:_(s32)
    RET implicit $r10
...
---
name:              store_global_s32
tracksRegLiveness: true
body:              |
  bb.0:
    liveins: $r6
    ; CHECK-LABEL: name: store_global_s32
    ; CHECK: liveins: $r6
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s32
    ; CHECK-NEXT: G_STORE [[COPY]](s32), [[GV]](p0) :: (store (s32) into @global_s32)
    ; CHECK-NEXT: RET
    %0:_(s32) = COPY $r6
    %1:_(p0) = G_GLOBAL_VALUE @global_s32
    G_STORE %0(s32), %1(p0) :: (store (s32) into @global_s32, align 4)
    RET
...
---
name:              load_global_s64
tracksRegLiveness: true
body:              |
  bb.0:
    ; CHECK-LABEL: name: load_global_s64
    ; CHECK: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s64
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[GV]](p0) :: (dereferenceable load (s32) from @global_s64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (dereferenceable load (s32) from @global_s64 + 4)
    ; CHECK-NEXT: $r10 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $r11 = COPY [[LOAD1]](s32)
    ; CHECK-NEXT: RET implicit $r10, implicit $r11
    %0:_(p0) = G_GLOBAL_VALUE @global_s64
    %1:_(s64) = G_LOAD %0(p0) :: (dereferenceable load (s64) from @global_s64, align 4)
    %2:_(s32), %3:_(s32) = G_UNMERGE_VALUES %1(s64)
    $r10 = COPY %2:_(s32)
    $r11 = COPY %3:_(s32)
    RET implicit $r10, implicit $r11
...
---
name:              store_global_s64
tracksRegLiveness: true
body:              |
  bb.0:
    liveins: $r6, $r7
    ; CHECK-LABEL: name: store_global_s64
    ; CHECK: liveins: $r6, $r7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $r6
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
    ; CHECK-NEXT: [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @global_s64
    ; CHECK-NEXT: G_STORE [[COPY]](s32), [[GV]](p0) :: (store (s32) into @global_s64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[GV]], [[C]](s32)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[PTR_ADD]](p0) :: (store (s32) into @global_s64 + 4)
    ; CHECK-NEXT: RET
    %0:_(s32) = COPY $r6
    %1:_(s32) = COPY $r7
    %2:_(s64) = G_MERGE_VALUES %0(s32), %1(s32)
    %3:_(p0) = G_GLOBAL_VALUE @global_s64
    G_STORE %2(s64), %3(p0) :: (store (s64) into @global_s64, align 4)
    RET
...
