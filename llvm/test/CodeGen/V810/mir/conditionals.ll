; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -march=v810 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o -| FileCheck %s

declare i32 @func1()
declare i32 @func2()

define i32 @conditionCheck(i32 %input) {
  ; CHECK-LABEL: name: conditionCheck
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(slt), [[COPY]](s32), [[C]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](s1), %bb.2
  ; CHECK-NEXT:   G_BR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.then:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func1, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.else:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func2, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY2]](s32)
  ; CHECK-NEXT:   RET implicit $r10
entry:
  %cond = icmp slt i32 %input, 3
  br i1 %cond, label %then, label %else
then:
  %res1 = call i32 @func1()
  ret i32 %res1
else:
  %res2 = call i32 @func2()
  ret i32 %res2
}

define i32 @boolCheck(i1 %cond) {
  ; CHECK-LABEL: name: boolCheck
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   G_BRCOND [[TRUNC]](s1), %bb.2
  ; CHECK-NEXT:   G_BR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.then:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func1, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.else:
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   CALL @func2, csr, implicit-def $r31, implicit-def $r10
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r10
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r10 = COPY [[COPY2]](s32)
  ; CHECK-NEXT:   RET implicit $r10
entry:
  br i1 %cond, label %then, label %else
then:
  %res1 = call i32 @func1()
  ret i32 %res1
else:
  %res2 = call i32 @func2()
  ret i32 %res2
}
