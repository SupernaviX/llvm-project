; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -march=v810 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o -| FileCheck %s

define void @voidTest(i1 %a, i8 %b, i16 %c, i32 %d) {
  ; CHECK-LABEL: name: voidTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   RET
    ret void
}

define i1 @boolTest(i1 %a, i8 %b, i16 %c, i32 %d) {
  ; CHECK-LABEL: name: boolTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s1)
  ; CHECK-NEXT:   $r10 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   RET implicit $r10
    ret i1 %a
}

define i8 @charTest(i1 %a, i8 %b, i16 %c, i32 %d) {
  ; CHECK-LABEL: name: charTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC1]](s8)
  ; CHECK-NEXT:   $r10 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   RET implicit $r10
    ret i8 %b
}

define i16 @shortTest(i1 %a, i8 %b, i16 %c, i32 %d) {
  ; CHECK-LABEL: name: shortTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC2]](s16)
  ; CHECK-NEXT:   $r10 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   RET implicit $r10
    ret i16 %c
}

define i32 @intTest(i1 %a, i8 %b, i16 %c, i32 %d) {
  ; CHECK-LABEL: name: intTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   $r10 = COPY [[COPY3]](s32)
  ; CHECK-NEXT:   RET implicit $r10
    ret i32 %d
}

define ptr @ptrTest(ptr %p) {
  ; CHECK-LABEL: name: ptrTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $r6
  ; CHECK-NEXT:   $r10 = COPY [[COPY]](p0)
  ; CHECK-NEXT:   RET implicit $r10
  ret ptr %p
}

define i32 @manyParamsTest(i1 %a, i8 %b, i16 %c, i32 %d, i32 %e) {
  ; CHECK-LABEL: name: manyParamsTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0)
  ; CHECK-NEXT:   $r10 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   RET implicit $r10
    ret i32 %e
}

define {i32, i32} @multiRegReturnTest(i32 %p1, i32 %p2) {
  ; CHECK-LABEL: name: multiRegReturnTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   $r10 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   $r11 = COPY [[COPY1]](s32)
  ; CHECK-NEXT:   RET implicit $r10, implicit $r11
    %a1 = insertvalue {i32, i32} undef, i32 %p1, 0
    %a2 = insertvalue {i32, i32} %a1, i32 %p2, 1
    ret {i32, i32} %a2
}

define {i32, i32, i32} @sretTest(i32 %p1, i32 %p2, i32 %p3) {
  ; CHECK-LABEL: name: sretTest
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32))
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
  ; CHECK-NEXT:   G_STORE [[COPY2]](s32), [[PTR_ADD]](p0) :: (store (s32))
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
  ; CHECK-NEXT:   G_STORE [[COPY3]](s32), [[PTR_ADD1]](p0) :: (store (s32))
  ; CHECK-NEXT:   RET
    %a1 = insertvalue {i32, i32, i32} undef, i32 %p1, 0
    %a2 = insertvalue {i32, i32, i32} %a1, i32 %p2, 1
    %a3 = insertvalue {i32, i32, i32} %a2, i32 %p3, 2
    ret {i32, i32, i32} %a3
}

define i64 @i64Test(i64 %p1, i64 %p2) {
  ; CHECK-LABEL: name: i64Test
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6, $r7, $r8, $r9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $r7
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY]](s32), [[COPY1]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $r8
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $r9
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[COPY2]](s32), [[COPY3]](s32)
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s64) = G_ADD [[MV]], [[MV1]]
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ADD]](s64)
  ; CHECK-NEXT:   $r10 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $r11 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   RET implicit $r10, implicit $r11
    %res = add i64 %p1, %p2
    ret i64 %res
}
