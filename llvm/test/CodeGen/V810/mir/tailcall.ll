; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -march=v810 -stop-after=irtranslator -global-isel -verify-machineinstrs %s -o -| FileCheck %s

declare i32 @otherFunc(i32 %input)

define i32 @tailCallThatClown(i32 %input) {
  ; CHECK-LABEL: name: tailCallThatClown
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r6 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   TAIL_CALL @otherFunc, csr, implicit $r31, implicit $r6
    %res = tail call i32 @otherFunc(i32 %input)
    ret i32 %res
}

define i32 @tailCallWithStackAllocation(i32 %input) {
  ; CHECK-LABEL: name: tailCallWithStackAllocation
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   liveins: $r6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $r6
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %stack.0.stack
  ; CHECK-NEXT:   G_STORE [[COPY]](s32), [[FRAME_INDEX]](p0) :: (store (s32) into %ir.stack)
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   $r6 = COPY [[COPY]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $r3, implicit $r3
  ; CHECK-NEXT:   TAIL_CALL @otherFunc, csr, implicit $r31, implicit $r6
    %stack = alloca i32
    store i32 %input, ptr %stack, align 4
    %res = tail call i32 @otherFunc(i32 %input)
    ret i32 %res
}
